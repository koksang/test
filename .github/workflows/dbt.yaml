name: DBT
run-name: ${{ github.ref.name }}
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
    branches:
      - main
      - staging
    paths:
      - de_dbt/**
      - .sqlfluff
      - infra/image/dbt/**

env:
  LOCATION: us-central1
  SQUAD: tech-data-eng-squad
  BUILD_SCRIPT: ./scripts/build_image.sh
  PUSH_IMAGE: "true"
  DBT_TARGET: cicd
  PROD_DBT_TARGET: production
  STAGING_DBT_TARGET: staging
  DEV_DBT_TARGET: staging
  DBT_DIR: de_dbt
  DBT_TARGET_PATH: target
  DBT_RESTORED_STATE_PATH: restored_target
  REMOTE_GITHUB_CACHE_PATH: gs://mv-etl-staging-composer-artifacts/.github_cache/${{ github.repository }}
  PROD_MANIFEST_PATH: gs://mv-etl-staging-composer-artifacts/data/${{ github.repository }}
  STAGING_MANIFEST_PATH: gs://mv-stg-etl-composer-artifacts/data/${{ github.repository }}
  DEV_MANIFEST_PATH: gs://mv-stg-etl-composer-artifacts/data/${{ github.repository }}
jobs:
  check-dbt:
    name: check-dbt
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup gcloud
        uses: ./.github/actions/setup_gcloud
      - name: Setup python
        uses: ./.github/actions/setup_python
        with:
          dependencies_group: ${{ env.DBT_TARGET }}
      - name: Setup DBT
        working-directory: ${{ env.DBT_DIR }}
        run: |
          dbt deps --log-level error --no-send-anonymous-usage-stats
          dbt debug
      - name: SQLFluff check
        run: |
          sqlfluff fix --show-lint-violations
          sqlfluff lint
  checkpoint-dbt:
    name: checkpoint-dbt
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup python
        uses: ./.github/actions/setup_python
        with:
          dependencies_group: ${{ env.DBT_TARGET }}
      - uses: pre-commit/action@v3.0.1
        with:
          extra_args: --hook-stage manual
  # slim-run-dbt:
  #   name: slim-run-dbt
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Setup gcloud
  #       uses: ./.github/actions/setup_gcloud
  #     - name: Setup python
  #       uses: ./.github/actions/setup_python
  #       with:
  #         dependencies_group: ${{ env.DBT_TARGET }}
  #     - name: Run DBT
  #       uses: ./.github/actions/run_dbt
  #       with:
  #         dbt_dir: ${{ env.DBT_DIR }}
  #         dbt_target: ${{ env.DBT_TARGET }}
  #         dbt_target_path: ${{ env.DBT_TARGET_PATH }}
  #         dbt_restored_state_path: ${{ env.DBT_RESTORED_STATE_PATH }}
  #         dbt_command: dbt run
  unit-test-dbt:
    name: unit-test-dbt
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup gcloud
        uses: ./.github/actions/setup_gcloud
      - name: Setup python
        uses: ./.github/actions/setup_python
        with:
          dependencies_group: ${{ env.DBT_TARGET }}
      - name: Run DBT
        uses: ./.github/actions/run_dbt
        with:
          dbt_dir: ${{ env.DBT_DIR }}
          dbt_target: ${{ env.DBT_TARGET }}
          dbt_target_path: ${{ env.DBT_TARGET_PATH }}
          dbt_restored_state_path: ${{ env.DBT_RESTORED_STATE_PATH }}
          dbt_command: dbt test -m "test_type:unit"
  build-dbt:
    if: ${{ github.event.pull_request.merged == true }}
    name: build-dbt
    runs-on: ubuntu-latest
    needs:
      - check-dbt
      - checkpoint-dbt
      # - slim-run-dbt
      - unit-test-dbt
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup gcloud
        uses: ./.github/actions/setup_gcloud
      - name: Setup python
        uses: ./.github/actions/setup_python
        with:
          dependencies_group: ${{ env.DBT_TARGET }}
      - id: setup-docker
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - id: build-push-image
        name: Build and push DBT image
        run: |
          gcloud auth configure-docker
          if [ ${{ github.base_ref }} == 'main' ]; then
            ${{ env.BUILD_SCRIPT }} production dbt
          elif [ ${{ github.base_ref }} == 'staging' ]; then
            ${{ env.BUILD_SCRIPT }} staging dbt
          else
            echo '::error unsupported environment'
            exit 1
          fi
      - id: set-dbt-state-env
        name: Set DBT environment
        shell: bash
        run: |
          if [ ${{ github.base_ref }} == 'main' ]; then
            echo 'manifest_path=${{ env.PROD_MANIFEST_PATH }}' >> $GITHUB_OUTPUT
            echo 'dbt_target=${{ env.PROD_DBT_TARGET }}' >> $GITHUB_OUTPUT

          elif [ ${{ github.base_ref }} == 'staging' ]; then
            echo 'manifest_path=${{ env.STAGING_MANIFEST_PATH }}' >> $GITHUB_OUTPUT
            echo 'dbt_target=${{ env.STAGING_DBT_TARGET }}' >> $GITHUB_OUTPUT

          elif [ ${{ github.base_ref }} == 'development' ]; then
            echo 'manifest_path=${{ env.DEV_MANIFEST_PATH }}' >> $GITHUB_OUTPUT
            echo 'dbt_target=${{ env.DEV_DBT_TARGET }}' >> $GITHUB_OUTPUT

          else
            echo '::error unsupported environment'
            exit 1
          fi
      - id: cache-dbt-state
        name: Cache DBT state
        uses: ./.github/actions/run_dbt
        with:
          dbt_dir: ${{ env.DBT_DIR }}
          dbt_target: ${{ steps.set-dbt-state-env.outputs.dbt_target }}
          dbt_target_path: ${{ env.DBT_TARGET_PATH }}
          dbt_restored_state_path: ${{ env.DBT_RESTORED_STATE_PATH }}
          remote_github_cache_path: ${{ steps.set-dbt-state-env.outputs.manifest_path }}
          enable_state: false
          cache_state: true
          dbt_command: dbt compile
